{"version":3,"sources":["list_context.js","Types.js","App.js","serviceWorker.js","index.js"],"names":["listContext","React","createContext","Cshow","props","react_default","a","createElement","cnt","Types","_useState","useState","_useState2","Object","slicedToArray","count","setCount","className","onClick","change","op","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNew","pd","newList","toConsumableArray","state","cart","newItem","id","name","filter","i","length","pos","map","indexOf","push","setState","removePd","indx","cartList","splice","list","list_context","Provider","value","App_Content","cartcount","getCartCount","forEach","item","Component","Content","react_router_dom","to","react_router","exact","path","component","List","Cart","pdlist","context","index","key","Addbutton","contextType","crt","cartlist","Removebutton","style","padding","Consumer","Boolean","window","location","hostname","match","routs","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9504d5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst listContext = React.createContext();\r\n\r\nexport default listContext;","import React,{useState} from 'react';\r\n\r\nfunction Types(){\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    return(\r\n        <div className='p'>\r\n        <Cshow cnt={count}/>\r\n        <div className='flex'>\r\n        <button onClick={()=>change('-')}>-</button>\r\n        <button onClick={()=>change('+')}>+</button>\r\n        </div>\r\n        </div>\r\n    )\r\n\r\n    function change(op){\r\n\r\n        if(op === '+'){\r\n        setCount(count+1);\r\n        }\r\n        \r\n        else if(op === '-' && count > 0){\r\n        setCount(count-1);\r\n        }\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nfunction Cshow(props){\r\n    return(\r\n        <h1>count:{props.cnt}</h1>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Types;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch,Link } from 'react-router-dom';\nimport listContext from './list_context';\nimport Types from './Types';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = { \n      list: [\n        {name:'book', id:1}, {name:'laptop', id:2}, {name:'game console', id:3}, {name:'radio', id:4}\n    ],\n    cart:[],\n    addNew: this.addNew,\n    removePd: this.removePd\n     }\n  }\n  \n  render() {\n\n    return (\n      <listContext.Provider value={this.state}>\n        <Content cartcount={this.getCartCount()}/>\n      </listContext.Provider>\n    )\n    \n  }\n\n  //////\n\n  getCartCount(){\n\n    let cnt = 0;\n\n    if(this.state.cart.length > 0){\n\n      this.state.cart.forEach(item => {\n      cnt += item.count;\n      });\n\n      return cnt;\n\n    }else{\n      return 0;\n    }\n    \n  }\n\n  //////\n\n  addNew = (pd) => {\n    const newList = [...this.state.cart];\n\n    const newItem = {\n      count:1,\n      id:pd.id,\n      name:pd.name\n    }\n\n    const filtered = newList.filter(i =>{\n      return i.id === pd.id;\n    });\n\n    if(filtered.length > 0){\n      const pos = newList.map(i => { return i.id; }).indexOf(pd.id);\n      newList[pos].count += 1;\n    }else{\n      newList.push(newItem);\n    }\n    \n\n    this.setState({cart:newList});\n  }\n\n  //////\n\n  removePd = (indx) =>{\n    const cartList = [...this.state.cart];\n\n    cartList.splice(indx,1);\n\n    this.setState({cart:cartList});\n  }\n}\n\n\n////////////////////////////////////////////////////\n\nclass Content extends Component {\n  \n  render() { \n    return ( \n        <div>\n          <div className='nav'>\n            <Link to='/contextcart'>\n              <button>products</button>\n            </Link>\n  \n            <Link to='contextcart/cart'>\n              <button>{'cart('+this.props.cartcount+')'}</button>\n            </Link>\n            \n          </div>\n  \n        <Switch>\n          <Route exact path='/contextcart' component={List}/>\n          <Route path='contextcart/cart' component={Cart}/>\n          <Route path='/types' component={Types}/>\n        </Switch>\n        </div>\n     );\n  }\n}\n \n/////////////////////////////////////////////////////////\n\n\nclass List extends Component {\n  \n  render() { \n    let lst = this.context.list;\n    const pdlist = lst.map((i,index) => {\n      return <li key={index}>id:{i.id} | product name: <strong>{i.name}</strong>  <Addbutton pd={i}/></li>\n    })\n\n    return ( \n          <ul>\n            {pdlist}\n          </ul>\n      );\n  }\n}\n\nList.contextType = listContext;\n\n///////////////////////////////////////////////////////\n\n\nclass Cart extends Component {\n\n  render() { \n    let crt = this.context.cart;\n    const cartlist = crt.map((i,index) => {\n      return (\n      <tr key={index}>\n        <td>{i.id}</td>\n        <td>{i.name}</td>\n        <td>{'x'+i.count}</td>\n        <td>{<Removebutton pd={i}/>}</td>\n      </tr>\n      )\n    })\n\n    if(crt.length > 0){\n\n    return ( \n\n          <div style={\n            {padding:'15px'}\n          }>\n          <table className='c'>\n            \n            <tr className='thead'>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>QUANTITY</th>\n              <th>ACTIONS</th>\n            </tr>\n            {cartlist}\n          </table>\n          </div>\n      )\n\n        } else{\n          return <p className='c'>cart is empty</p>\n        }\n  }\n}\n\nCart.contextType = listContext;\n\n//////////////////////////////////////////////////////\n\nfunction Addbutton(props){\n  return(\n    <listContext.Consumer>\n      {(value) => (\n          <button onClick={()=>value.addNew(props.pd)}>\n            add to cart\n          </button>\n          )}\n          </listContext.Consumer>\n  )\n}\n\n\n\n//////////////////////////////////////////////////////\n\nfunction Removebutton(props){\n  return(\n    <listContext.Consumer>\n      {(value) => (\n          <button onClick={()=>value.removePd(value.cart.indexOf(props.pd))}>\n            remove\n          </button>\n          )}\n          </listContext.Consumer>\n  )\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './style.css'\n\n\nconst routs = <Router>\n    <App/>\n</Router>\n\nReactDOM.render(routs, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}