{"version":3,"sources":["list_context.js","App.js","serviceWorker.js","index.js"],"names":["listContext","React","createContext","Content","props","react_default","a","createElement","className","react_router_dom","to","concat","process","cartcount","react_router","exact","path","component","List","Cart","pdlist","useContext","list","map","i","index","key","id","name","Addbutton","pd","cart","cartlist","count","Removebutton","length","style","padding","stt","onClick","addNew","state","removePd","indexOf","App","initialState","newList","appstate","newItem","filter","pos","push","console","log","setState","Object","objectSpread","indx","cartList","splice","_useState","useState","_useState2","slicedToArray","list_context","Provider","value","cnt","forEach","item","getCartCount","Boolean","window","location","hostname","match","routs","basename","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80f92828.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst listContext = React.createContext();\r\n\r\nexport default listContext;","import React, { useContext, useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch,Link } from 'react-router-dom';\nimport listContext from './list_context';\nimport Types from './Types';\n\n\nfunction App() {\n\n    const initialState = { \n\n      list: [\n        {name:'book', id:1}, {name:'laptop', id:2}, {name:'game console', id:3}, {name:'radio', id:4}\n    ],\n\n    cart:[],\n\n    addNew: addNew,\n    removePd: removePd\n    }\n    \n    const [ appstate, setState ] = useState(initialState);\n\n\n    return (\n      <listContext.Provider value={appstate}>\n        <Content cartcount={getCartCount()}/>\n      </listContext.Provider>\n    )\n    \n\n  //////\n\n  function getCartCount(){\n\n    let cnt = 0;\n\n    if(appstate.cart.length > 0){\n\n      appstate.cart.forEach(item => {\n      cnt += item.count;\n      });\n    }\n    return cnt;\n  }\n\n  //////\n\n  function addNew(pd){\n    let newList = appstate.cart;\n\n    const newItem = {\n      count:1,\n      id:pd.id,\n      name:pd.name\n    }\n\n    const filtered = newList.filter(i =>{\n      return i.id === pd.id;\n    });\n\n    if(filtered.length > 0){\n      const pos = newList.map(i => { return i.id; }).indexOf(pd.id);\n      newList[pos].count += 1;\n    }else{\n      newList.push(newItem);\n    }\n    \n    console.log(newList);\n    setState({...appstate, cart:newList});\n    console.log(appstate);\n  }\n\n  //////\n\n  function removePd(indx){\n    const cartList = appstate.cart;\n\n    cartList.splice(indx,1);\n\n    setState({...appstate, cart:cartList});\n  }\n}\n\n\n////////////////////////////////////////////////////\n\nfunction Content(props) {\n  \n \n    return ( \n        <div>\n          <div className='nav'>\n            <Link to={`${process.env.PUBLIC_URL}/`}>\n              <button>products</button>\n            </Link>\n  \n            <Link to={`${process.env.PUBLIC_URL}/cart`}>\n              <button>{'cart('+props.cartcount+')'}</button>\n            </Link>\n            \n          </div>\n  \n        <Switch>\n          <Route exact path={`${process.env.PUBLIC_URL}/`} component={List}/>\n          <Route path={`${process.env.PUBLIC_URL}/cart`} component={Cart}/>\n        </Switch>\n        </div>\n     );\n\n}\n \n/////////////////////////////////////////////////////////\n\n\nfunction List(){\n  \n\n    let lst = useContext(listContext);\n\n    const pdlist = lst.list.map((i,index) => {\n      return <li key={index}>id:{i.id} | product name: <strong>{i.name}</strong>  <Addbutton pd={i}/></li>\n    })\n\n    return ( \n          <ul>\n            {pdlist}\n          </ul>\n      );\n  \n}\n\n///////////////////////////////////////////////////////\n\n\nfunction Cart(){\n\n    // get shopping cart array from listcontext\n\n    const { cart } = useContext(listContext);\n\n    const cartlist = cart.map((i,index) => {\n      return (\n      <tr key={index}>\n        <td>{i.id}</td>\n        <td>{i.name}</td>\n        <td>{'x'+i.count}</td>\n        <td>{<Removebutton pd={i}/>}</td>\n      </tr>\n      )\n    })\n\n    if(cart.length > 0){\n\n    return ( \n\n          <div style={\n            {padding:'15px'}\n          }>\n          <table className='c'>\n            \n            <tr className='thead'>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>QUANTITY</th>\n              <th>ACTIONS</th>\n            </tr>\n            {cartlist}\n          </table>\n          </div>\n      )\n\n        } else{\n          return <p className='c'>cart is empty</p>\n        }\n  \n}\n\n\n//////////////////////////////////////////////////////\n\nfunction Addbutton(props){\n  const stt = useContext(listContext);\n  return(\n          <button onClick={()=>stt.addNew(props.pd)}>\n            add to cart\n          </button>    \n  )\n}\n\n\n\n//////////////////////////////////////////////////////\n\nfunction Removebutton(props){\n  const state = useContext(listContext);\n  return(\n          <button onClick={()=>state.removePd(state.cart.indexOf(props.pd))}>\n            remove\n          </button>\n  )\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './style.css'\n\n\nconst routs = <Router basename={'/contextcart'}>\n    <App/>\n</Router>\n\nReactDOM.render(routs, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}